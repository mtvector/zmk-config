/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "tap-preferred"; };

/ {
    behaviors {
        shift_del: shift_del {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        shift_underscore: shift_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_UNDERSCORE";
            bindings = <&kp SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        layer_dance: layer_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE";
            #binding-cells = <0>;
            bindings = <&to 1>, <&to 2>, <&to 3>;

            tapping-term-ms = <400>;
        };

        colon_semicolon: colon_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMICOLON";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <13 14>;
        };

        ctrlz {
            bindings = <&kp LC(Z)>;
            key-positions = <25 26>;
        };

        ctrlx {
            bindings = <&kp LC(X)>;
            key-positions = <26 27>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <27 28>;
        };

        ctrlv {
            bindings = <&kp LC(V)>;
            key-positions = <29 28>;
        };

        quote_combo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <22 21>;
        };

        bslash_combo {
            bindings = <&kp BACKSLASH>;
            key-positions = <10 9>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <34 33>;
        };

        capsword_combo {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        F1_combo {
            bindings = <&kp F1>;
            key-positions = <1 4>;
        };

        f2_combo {
            bindings = <&kp F2>;
            key-positions = <7 10>;
        };

        brackets_combos {
            bindings = <&brackets>;
            key-positions = <31 28>;
        };

        parentheses_combo {
            bindings = <&parentheses>;
            key-positions = <27 32>;
        };

        braces_combo {
            bindings = <&braces>;
            key-positions = <26 33>;
        };
    };

    macros {
        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETS";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT_ARROW>;
            label = "BRACES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC          &kp Q           &kp W           &kp E              &kp R             &kp T      &kp Y    &kp U              &kp I        &kp O            &kp P             &kp BACKSLASH
&kp TAB          &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D        &mt LEFT_SHIFT F  &lt 2 G    &lt 2 H  &mt RIGHT_SHIFT J  &mt RCTRL K  &mt RIGHT_ALT L  &colon_semicolon  &kp SQT
&kp EXCLAMATION  &kp Z           &kp X           &kp C              &lt 1 V           &kp B      &kp N    &lt 1 M            &kp COMMA    &kp PERIOD       &kp SLASH         &kp TILDE
                 &kp F1          &tog 1          &shift_underscore  &layer_dance                          &kp ENTER          &shift_del   &tog 2           &kp LEFT_GUI
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        lower_layer {
            bindings = <
&kp ESCAPE  &kp ASTERISK  &kp N7           &kp N8             &kp N9        &kp PLUS      &kp F3     &kp F4          &kp UP_ARROW    &kp F5     &kp F6         &kp F7
&kp CARET   &mt LGUI N0   &mt LEFT_ALT N4  &mt LCTRL N5       &mt LSHFT N6  &kp PERIOD    &kp EQUAL  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp F9         &kp F10
&to 0       &kp SLASH     &kp N1           &kp N2             &kp N3        &kp MINUS     &kp COMMA  &kp HOME        &kp PAGE_UP     &kp END    &kp PAGE_DOWN  &kp F12
            &kp F1        &tog 1           &shift_underscore  &to 0                                  &kp ENTER       &shift_del      &tog 2     &kp LGUI
            >;

            //            sensor-bindings = <&inc_dec_kp UP DOWN>;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        raise_layer {
            bindings = <
&kp ESCAPE  &kp GRAVE   &kp PERCENT        &kp BACKSLASH         &kp PIPE          &kp SLASH          &kp AMPERSAND  &kp EXCL           &kp PIPE               &kp LESS_THAN         &kp GREATER_THAN      &kp K_VOLUME_UP
&kp TAB     &kp CARET   &kp LEFT_BRACE     &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp PRINTSCREEN    &kp EQUAL      &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE       &kp HASH              &kp K_VOLUME_DOWN
&to 0       &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp UNDER         &kp MINUS          &kp DOLLAR     &kp AT             &kp ASTRK              &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_MUTE
            &kp F1      &tog 1             &shift_underscore     &to 0                                               &kp ENTER          &shift_del             &tog 2                &to 3
            >;

            //            sensor-bindings = <&inc_dec_kp LEFT RIGHT>;

            sensor-bindings = <&inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        adjust_layer {
            bindings = <
&kp ESCAPE    &sys_reset    &bootloader   &trans             &trans        &bt BT_CLR    &none   &none      &kp UP_ARROW  &kp SLCK   &kp PAUSE_BREAK  &none
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4  &trans        &none   &kp LEFT   &kp DOWN      &kp RIGHT  &trans           &none
&to 0         &none         &none         &none              &none         &none         &trans  &trans     &trans        &trans     &kp END          &kp PG_DN
              &none         &to 0         &shift_underscore  &to 0                               &kp ENTER  &shift_del    &to 0      &trans
            >;

            //            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;

            sensor-bindings = <&inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
