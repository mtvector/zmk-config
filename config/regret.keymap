#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt { flavor = "tap-preferred"; };

/ {
    combos {
        compatible = "zmk,combos";

        /* Top corners (Q+P) = bootloader */
        /* Bottom corners (Z+/) = RGB toggle */

        combo_rgb_tog {
            key-positions = <20 29>;
            bindings = <&rgb_ug RGB_TOG>;
        };

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        ctrlz {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        ctrlx {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
        };

        ctrlc {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        ctrlv {
            bindings = <&kp LC(V)>;
            key-positions = <24 23>;
        };

        bslash_combo {
            bindings = <&kp BACKSLASH>;
            key-positions = <8 9>;
        };

        quote_combo {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <29 28>;
        };

        brackets_combo {
            bindings = <&brackets>;
            key-positions = <23 26>;
        };

        parentheses_combo {
            bindings = <&parentheses>;
            key-positions = <22 27>;
        };

        braces_combo {
            bindings = <&braces>;
            key-positions = <21 28>;
        };

        capsword_combo {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        F1_combo {
            bindings = <&kp F1>;
            key-positions = <3 0>;
        };

        F2_combo {
            bindings = <&kp F2>;
            key-positions = <6 9>;
        };
    };

    macros {
        brackets: brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKETS";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACES";
        };
    };

    behaviors {
        shift_del: shift_del {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_DEL";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shift_underscore: shift_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_UNDERSCORE";
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        layer_dance: layer_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_DANCE";
            #binding-cells = <0>;
            bindings = <&to 1>, <&to 2>, <&to 3>;

            tapping-term-ms = <400>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------
            // |    Q    |    W    |    E    |    R    |    T    |    Y    |    U    |    I    |    O    |    P    |
            // |    A    |    S    |    D    |    F    |    G    |    H    |    J    |    K    |    L    |    ;    |
            // |    Z    |    X    |    C    |    V    |    B    |    N    |    M    |    ,    |    .    |    /    |
            //                               |   ESC   |  SPACE  | RETURN  |   BSPC  |

            bindings = <
&kp Q              &kp W      &kp E    &kp R       &kp T  &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A              &kp S      &kp D    &kp F       &kp G  &kp H  &kp J  &kp K      &kp L    &kp SEMI
&kp Z              &kp X      &kp C    &kp V       &kp B  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH
&shift_underscore  &kp SPACE  &kp RET  &shift_del
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans
            >;
        };
    };
};
